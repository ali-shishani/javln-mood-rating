using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace InterviewProjectTemplate.Data.Identity
{
    public class AccountException : Exception
    {
        public AccountErrorCode AccountErrorCode { get; init; }

        public string PropertyKey { get; set; }
        public string PropertyValue { get; set; }

        /// <summary>
        /// A short, human-readable summary of the problem type.
        /// It SHOULD NOT change from occurrence to occurrence of the problem,
        /// except for purposes of localization(e.g., using proactive content negotiation; see[RFC7231], Section 3.4).
        /// </summary>
        public string Title { get; protected set; }

        /// <summary>
        /// A human-readable explanation specific to this occurrence of the problem.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public string? Detail { get; protected set; }

        /// <summary>
        /// A URI reference [RFC3986] that identifies the problem type.
        /// This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]).
        /// When this member is not present, its value is assumed to be "about:blank".
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Uri? Type { get; protected set; }

        /// <summary>
        /// A URI reference that identifies the specific occurrence of the problem.
        /// It may or may not yield further information if dereferenced.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public Uri? Instance { get; protected set; }

        /// <summary>
        /// The HTTP status code([RFC7231], Section 6)
        /// generated by the origin server for this occurrence of the problem.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public int? Status { get; protected set; }

        /// <summary>
        /// Gets the validation errors associated with this instance
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public IDictionary<string, string[]>? Errors { get; protected set; }

        public AccountException(string? title, string? detail,
            Uri? type, Uri? instance, int? status = null,
            IDictionary<string, string[]> errors = null)
        {
            SetDetails(title, detail, status, type, instance, errors);
        }

        public AccountException(string title, string detail)
        {
            SetDetails(title, detail);
        }

        public AccountException(string title, string detail, Exception ex) : base(detail, ex)
        {
            SetDetails(title, detail);
        }


        public AccountException(string title, string detail, int status,
            IDictionary<string, string[]> errors)
            : this(title, detail)
        {
            SetDetails(title: title, detail: detail, status: status, errors: errors);
        }

        public AccountException(string title, string detail,
            IDictionary<string, string[]> errors)
            : this(title, detail)
        {
            SetDetails(title: title, detail: detail, status: 400, errors: errors);
        }

        private void SetDetails(string title, string detail,
            int? status = null, Uri? typeStr = null, Uri? instance = null
            , IDictionary<string, string[]>? errors = null)
        {
            Title = title;
            Detail = detail;
            Status = status;
            Type = typeStr;
            Instance = Instance;
            Errors = errors;
        }

        public AccountException(AccountErrorCode accountErrorCode,
                                string details,
                                string propertyKey,
                                string propertyValue)
            : base(accountErrorCode.ToString())
        {
            Title = accountErrorCode.ToString();
            AccountErrorCode = accountErrorCode;
            PropertyKey = propertyKey;
            PropertyValue = propertyValue;
            Errors = new Dictionary<string, string[]>() { [propertyKey] = new[] { propertyValue } };
        }

        public AccountException(AccountErrorCode accountErrorCode, string details)
        : base(accountErrorCode.ToString())
        {
            Title = accountErrorCode.ToString();
            AccountErrorCode = accountErrorCode;
        }

        public AccountException(AccountErrorCode accountErrorCode, string details, int statusCode)
            : base(accountErrorCode.ToString())
        {
            Title = accountErrorCode.ToString();
            AccountErrorCode = accountErrorCode;
            Status = statusCode;
        }

        public AccountException(AccountErrorCode accountErrorCode, string details, int statusCode,
            Exception innerException)
            : base(accountErrorCode.ToString(), innerException)
        {
            Title = accountErrorCode.ToString();
            AccountErrorCode = accountErrorCode;
            Status = statusCode;
        }
    }
}
